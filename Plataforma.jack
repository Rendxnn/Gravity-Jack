class Plataforma {
	field int actual;
	field Array bases;
	field int i;
	field Base base_actual;
	field int x_anterior;
	field int y_anterior;
	field int posicion_primera_base;
	field Base primera_base;
	field int x_primera_base;
	field Base base_anterior;

	constructor Plataforma new(Base base_inicial) {
		let actual = 0; 
		let bases = Array.new(5);
		let i = 0;
		let base_actual = base_inicial;
		while (i < 5) {
			let i = i + 1;
			let base_actual = generar_base(base_actual, 5);
			do agregar_base(base_actual);
		}
		let posicion_primera_base = 0;
		return this;
	}

	method void agregar_base(Base nueva_base) {
		if (actual = 5) {
			let actual = 0;
		}
		let bases[actual] = nueva_base;
		let actual = actual + 1;
		return;
	}

	method Base generar_base(Base base_anterior, int semilla_actual) {
		var int posicion;


		do Random.setSeed(semilla_actual);
		let posicion = Random.randRange(2);
		let x_anterior = base_anterior.get_x();
		let y_anterior = base_anterior.get_y();
		do Output.printInt(i);

		if (posicion = 2) { 
			let base_actual = Base.new(x_anterior + 8, y_anterior - 10);
		}
		if (posicion = 1) { 
			let base_actual = Base.new(x_anterior + 10, y_anterior);
		}
		if (posicion = 0) { 
			let base_actual = Base.new(x_anterior + 8, y_anterior + 10);

		}

		return base_actual;
	}

	method void reemplazar_base() {
		let primera_base = bases[posicion_primera_base];
		let x_primera_base = primera_base.get_x();
		if (x_primera_base < 0) {
			if (posicion_primera_base > 0) {
				let base_anterior = bases[posicion_primera_base - 1];
			}
			else {
				let base_anterior = bases[5];
			}
			let base_actual = generar_base(base_anterior, 5);
			let bases[posicion_primera_base] = base_actual;
			if (posicion_primera_base = 5) {
				let posicion_primera_base = 0;
			}
			else {
				let posicion_primera_base = posicion_primera_base + 1;
			}
		}
		return;
	}

	method void avanzar() {

		let i = 0;
		while (i < 5) {
			let base_actual = bases[i];	
			do base_actual.borrar_base();
			do base_actual.avanzar_base();
			do base_actual.dibujar_base();
			let i = i + 1;
		}

		return;
	}
}

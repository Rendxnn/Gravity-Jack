class Plataforma {
	field int actual;
	field Array bases;
	field Base base_actual;
	field int posicion_primera_base;

	constructor Plataforma new(Base base_inicial) {
		var int i;
		let actual = 0; 
		let bases = Array.new(8);
		let i = 0;
		let base_actual = base_inicial;
		while (i < 8) {
			do agregar_base(base_actual);
			let base_actual = generar_base(base_actual, 5);
			let i = i + 1;
		}
		let posicion_primera_base = 0;
		return this;
	}

	method Array get_bases() {
		return bases;
	}

	method void agregar_base(Base nueva_base) {
		if (actual = 8) {
			let actual = 0;
		}
		let bases[actual] = nueva_base;
		let actual = actual + 1;
		return;
	}

	method Base generar_base(Base base_anterior, int semilla_actual) {
		var int posicion;
		var int x_anterior;
		var int y_anterior;

		do Random.setSeed(semilla_actual);
		let posicion = Random.randRange(1);
		let x_anterior = base_anterior.get_x();
		let y_anterior = base_anterior.get_y();


		if (posicion = 1) { // generar base arriba
			if (y_anterior - 30 < 0) {
				let base_actual = Base.new(x_anterior + 4, y_anterior + 30);
			}
			else {
				let base_actual = Base.new(x_anterior + 4, y_anterior - 30);
			}
		}
		if (posicion = 0) {  // generar base abajo
			if (y_anterior + 30 > 256) {
				let base_actual = Base.new(x_anterior + 4, y_anterior - 30);
			}
			else {
				let base_actual = Base.new(x_anterior + 4, y_anterior + 30);
			}
		}

		return base_actual;
	}

	method void avanzar() {
		var int i;
		var Base base_actual;

		let i = 0;
		while (i < 8) {
			let base_actual = bases[i];	
			do base_actual.borrar_base();
			do base_actual.avanzar_base();
			do base_actual.dibujar_base();
			let i = i + 1;
		}
		do Memory.deAlloc(base_actual);
		return;
	}

	method int sobre_base(int y_cubo) {
		var int i;	
		var Base base_actual;

		let i = 0;
		while (i < 8) {
			let base_actual = bases[i];
			if ((base_actual.get_y() + 17) > y_cubo) {
				if (y_cubo > (base_actual.get_y() - 3)) {
					if (2 < (base_actual.get_x() + 3)) {
						if ((base_actual.get_x() - 3) < 2) {
							return 1;
						}
					}
				}
			}
			let i = i + 1;
			}
		return 0;
	}
}

class Cubo {
    field int x, y;

    constructor Cubo new(int px, int py) {
        let x = px;
        let y = py;
        do dibujar_cubo(x, y);
        return this;
    }
 
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void dibujar_cubo(int xx, int yy){
        var int memAddress;
        let memAddress = 16384 + (32 * yy) + xx;
        do Memory.poke(memAddress + 0, -1);
        do Memory.poke(memAddress + 32, -1);
        do Memory.poke(memAddress + 64, -16381);
        do Memory.poke(memAddress + 96, -16381);
        do Memory.poke(memAddress + 128, -16381);
        do Memory.poke(memAddress + 160, -13261);
        do Memory.poke(memAddress + 192, -13261);
        do Memory.poke(memAddress + 224, -16381);
        do Memory.poke(memAddress + 256, -16381);
        do Memory.poke(memAddress + 288, -14365);
        do Memory.poke(memAddress + 320, -14365);
        do Memory.poke(memAddress + 352, -16381);
        do Memory.poke(memAddress + 384, -16381);
        do Memory.poke(memAddress + 416, -16381);
        do Memory.poke(memAddress + 448, -1);
        do Memory.poke(memAddress + 480, -1);
        return;
    }

    method void borrar(int xx, int yy){
        var int memAddress;
        let memAddress = 16384 + (32 * yy) + xx;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }
}